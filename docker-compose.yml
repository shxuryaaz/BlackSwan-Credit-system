version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: credtech_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-credtech}
      POSTGRES_USER: ${POSTGRES_USER:-credtech}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-credtech_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-credtech}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: credtech_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: credtech_api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-credtech}
      - POSTGRES_USER=${POSTGRES_USER:-credtech}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-credtech_pass}
      - REDIS_URL=redis://redis:6379/0
      - MLFLOW_URI=http://mlflow:5000
      - FRED_API_KEY=2666d1fe95f25afe531491faf434ce46 
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EDGAR_CACHE_DIR=/data/edgar_cache
      - YFINANCE_DELAY_MINUTES=15
    volumes:
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: ./workers
      dockerfile: Dockerfile
    container_name: credtech_worker
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-credtech}
      - POSTGRES_USER=${POSTGRES_USER:-credtech}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-credtech_pass}
      - REDIS_URL=redis://redis:6379/0
      - MLFLOW_URI=http://mlflow:5000
      - FRED_API_KEY=2666d1fe95f25afe531491faf434ce46
      - EDGAR_CACHE_DIR=/data/edgar_cache
      - YFINANCE_DELAY_MINUTES=15
    volumes:
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  mlflow:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: credtech_mlflow
    ports:
      - "5001:5000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-credtech}
      - POSTGRES_USER=${POSTGRES_USER:-credtech}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-credtech_pass}
      - MLFLOW_TRACKING_URI=http://localhost:5000
    volumes:
      - ./data:/data
      - mlflow_data:/mlflow
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: credtech_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      api:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: credtech_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: credtech_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  prometheus_data:
  grafana_data:
